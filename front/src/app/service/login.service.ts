import { Injectable } from '@angular/core';
import { Observable, Subscription, tap, timer } from 'rxjs';
import { JwtHelperService } from '@auth0/angular-jwt';
import { AuthControllerService, AuthResponse } from '../autogenerated/back-map';
import { Auth } from '../model/Auth';

@Injectable({
  providedIn: 'root'
})
export class LoginService {

  private token?: string;
  private expireSubscription?: Subscription;

  public get UserName(): string {
    const auth = this.decodeToken();
    return auth && auth.name ? auth.name : ''
  }
  public get Roles(): string[] {
    const auth = this.decodeToken();
    return auth && auth.roles ? auth.roles : []
  }
  public get IsLogged(): boolean {
    return this.token ? true : false;
  }
  public get IsAdmin(): boolean {
    return this.Roles.filter(x => x == "ADMIN").length > 0;
  }
  public get IsTokenExpired(): boolean {
    return this.token ? this.jwtHelper.isTokenExpired(this.token) : false;
  }

  constructor(
    private authControllerService: AuthControllerService,
    private jwtHelper: JwtHelperService
  ) { }

  login(login: string, password: string): Observable<AuthResponse> {
    return this.authControllerService.login({
      login: login,
      password: password
    }).pipe(tap(resp => {
      if (resp?.token) {
        if (this.expireSubscription) {
          this.expireSubscription.unsubscribe();
          delete this.expireSubscription;
        }

        const due = this.jwtHelper.getTokenExpirationDate(resp.token)
        if (due) {
          this.expireSubscription = timer(due)
          .subscribe(() => {
            delete this.token;
          })
        }

        this.token = resp.token;
      }
    }));
  }

  private decodeToken(): Auth | null {
    return this.token ?
      this.jwtHelper.decodeToken<Auth>(this.token) : null;
  }
}
